#!/usr/bin/env php
<?php
// ฟังก์ชันตรวจสอบว่าถูกเรียกจาก CLI หรือไม่
function isRunningFromCLI(): bool {
    return php_sapi_name() === 'cli' || defined('STDIN');
}
// ถ้าไม่ใช่ CLI ให้หยุดการทำงานของสคริปต์
if (!isRunningFromCLI()) {
    die("This script must be run from the command line.\n");
}

use Core\Database;
use Dotenv\Dotenv;

require_once __DIR__ . '/vendor/autoload.php';
$dotenv = Dotenv::createImmutable(__DIR__);
$dotenv->load();

$command = $argv[1] ?? null;

switch ($command) {
    case 'migrate':
        // migrate ทั้งหมด
        migrate();
        break;
    case 'migrate:reset':
        // ลบ migrate ทั้งหมด
        migratereset();
        break;
    case 'make:migration':
        $name = $argv[2] ?? null;
        makemigration($name);
        break;
    case 'make:controller':
        $name = $argv[2] ?? null;
        makecontroller($name);
        break;
    case 'make:model':
        // name model
        $name = $argv[2] ?? null;
        makemodel($name);
        break;
    case 'dump-autoload':
        dumpAutoload();
        break;
    case 'serve':
        serve();
        break;
    default:
        echo "\033[41m \033[7m\033[1m ERROR!! \033[0m \033[41m X:\Deawx> Command Not Found.!! \033[0m\n";
        break;
}

function migrate() {
    try {
        Database::getInstance()->connect();
    } catch (PDOException $e) {
        echo "\033[41m \033[7m\033[1m ERROR!! \033[0m \033[41m Database connection failed : " . $e->getMessage() . "\033[0m\n";
        exit(1);
    }

    foreach (glob(__DIR__ . '/database/migrations/*.php') as $migrationFile) {
        require_once $migrationFile;
        $class = basename($migrationFile, '.php');
        $className = preg_replace('/^[-0-9_-]+/', '', $class);
        $className = str_replace('-', '', trim($className, '-'));

        if (class_exists($className)) {
            $migration = new $className();
            $migration->up();
        } else {
            echo "Class does not exist: " . $className . "\n";
        }
    }
}

function migratereset() {
    try {
        Database::getInstance()->connect();
    } catch (PDOException $e) {
        echo "Database connection failed: " . $e->getMessage() . "\n\n";
        exit(1);
    }

    foreach (glob(__DIR__ . '/database/migrations/*.php') as $migrationFile) {
        require_once $migrationFile;
        $class = basename($migrationFile, '.php');
        $className = preg_replace('/^[-0-9_-]+/', '', $class);
        $className = str_replace('-', '', trim($className, '-'));
        if (class_exists($className)) {
            $migration = new $className();
            $migration->down();
        } else {
            echo "Class does not exist: " . $className . "\n";
        }
    }
}

function makemigration($name) {
    if ($name) {
        $timestamp = date('Y_m_d_His');
        $className = 'create_' . $name . 'table';
        $fileName = "{$timestamp}-create_{$name}-table.php";
        $migrationTemplate = <<<EOT
        <?php

        use Core\Migration;

        class {$className} {
            public function up(){
                \$migration = new Migration();
                \$migration->createTable('{$name}', function (\$table) {
                    \$table->id();

                    \$table->timestamps();
                }, 'Tables Comment Demo');
            }
            // Drop the table
            public function down(){
                    \$migration = new Migration();
                    \$migration->dropTable('{$name}');
            }
        }
        EOT;
        file_put_contents(__DIR__ . "/database/migrations/{$fileName}", $migrationTemplate);
        echo "\033[42m \033[7m Successfully!!\033[0m \033[45m Migration created : {$fileName} \033[0m\n";
    } else {
        echo "\033[41m \033[7m ERROR!! \033[0m \033[41m Migration name is required.!! \033[0m\n";
    }
}

function makecontroller($name) {
    if ($name) {
        $name = ucfirst(trim($name)) . "Controller";
        $controllerTemplate = <<<EOT
<?php

namespace App\Controllers;

use Core\Json;
use Core\Cors;

class {$name}
{
    private Cors \$cors;
    private \$jsoncore;

    public function __construct() {
        \$this->cors = new Cors();
        \$this->jsoncore = new Json();
        \$this->cors->origin(['*'])
            ->methods(['GET', 'POST'])
            ->headers(['Content-Type', 'Authorization'])
            ->expose(['Content-Length'])
            ->maxAge(0)
            ->credentials(false)
            ->setHeaders();
    }

    public function index() {
        \$this->jsoncore->show([
            "status" => true,
            "message" => "👋 {$name} Controller index  EasyCore "
        ], 200);
    }
}
EOT;
        file_put_contents(__DIR__ . "/App/Controllers/{$name}.php", $controllerTemplate);
        echo "{$name} created successfully.\n";
    } else {
        echo "Controller name is required.\n";
    }
}

function makemodel($name) {
    if ($name) {
        $name = ucfirst(trim($name));
        $modelTemplate = <<<EOT
<?php

namespace App\Models;

use Exception;
use PDOException;
use Medoo\Medoo;
use Core\Database;

class {$name}
{
  private Medoo \$db;
    public function __construct() {
        \$this->db = Database::getInstance()->getConnection();
    }

}
EOT;
        file_put_contents(__DIR__ . "/App/Models/{$name}.php", $modelTemplate);
        echo "{$name} model created successfully.\n";
    } else {
        echo "Model name is required.\n";
    }
}

function dumpAutoload() {
    echo "Dumping autoload...\n";
    exec('composer dump-autoload');
    // สีเขียว
    echo   "\033[32m Autoload dumped successfully.\n \033[0m";
}

function serve() {
    $port = getenv('APP_PORT') ?: 8000;
    // $port = $_ENV['APP_PORT'] ?? 8000;
    $host = 'localhost';
    echo "Starting server on http://$host:$port\n";
    // exec("php -S $host:$port -t public");
    exec("php -S $host:$port");
    // echo ("php -S $host:$port");
}